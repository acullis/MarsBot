package com.red_badger.marsbot;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class MapTests {

    @Test
    void basicBotTest() {
        int x = 2;
        int y = 2;

        Map sut = new Map(x, y);
        String expected = "\n" +
                "2[...]\n" +
                "1[...]\n" +
                "0[...]\n" +
                "  ------\n" +
                "  012345";

        assertEquals(x+1, sut.map[0].length);
        assertEquals(y+1, sut.map.length);
    }

    @Test
    void sampleMapTest() {
        int x = 5;
        int y = 3;

        Map sut = new Map(x, y);

        assertEquals(x+1, sut.map.length);
        assertEquals(y+1, sut.map[0].length);
        System.out.println(sut.toString());
        /*
        3[......]
        2[......]
        1[......]
        0[......]
          ------
          012345
         */
    }

    @Test
    void bigMapTest() {
        int x = 50;
        int y = 50;

        Map sut = new Map(x, y);

        assertEquals(x+1, sut.map.length);
        assertEquals(y+1, sut.map[0].length);
        System.out.println(sut.toString());
        /*
        30[...................................................]
        29[...................................................]
        28[...................................................]
        27[...................................................]
        26[...................................................]
        25[...................................................]
        24[...................................................]
        23[...................................................]
        22[...................................................]
        21[...................................................]
        20[...................................................]
        19[...................................................]
        18[...................................................]
        17[...................................................]
        16[...................................................]
        15[...................................................]
        14[...................................................]
        13[...................................................]
        12[...................................................]
        11[...................................................]
        10[...................................................]
        9[...................................................]
        8[...................................................]
        7[...................................................]
        6[...................................................]
        5[...................................................]
        4[...................................................]
        3[...................................................]
        2[...................................................]
        1[...................................................]
        0[...................................................]
          ------
          012345
         */
    }
}
